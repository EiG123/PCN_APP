import streamlit as st
import os
from utils.parse_controller.parse_points import parse_kml_points
from utils.main_controller.main_analysis import analyze_points_vs_redlines
from utils.excel_controller.write_results_to_excel import write_results_to_excel
from config import REDLINE_FILE

st.set_page_config(page_title="üåç KML Points vs Redlines", layout="wide")
st.title("üåç KML Points vs Redlines Analyzer")

st.markdown("""
### üìò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå **Points KML**  
2. ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ **Threshold** (‡∏£‡∏∞‡∏¢‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏Å‡∏±‡∏ö Redline)  
3. ‡∏Å‡∏î **Analyze**  
4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (.xlsx)
""")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå redlines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
missing_files = [f for f in REDLINE_FILE if not os.path.exists(f)]
if missing_files:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Redline: {missing_files}")
    st.stop()

# Convert REDLINE_FILE list ‡πÄ‡∏õ‡πá‡∏ô dict
redlines_dict = {f"redline_{i}": path for i, path in enumerate(REDLINE_FILE)}

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î points
points_file = st.file_uploader("üìÇ Upload Points KML", type="kml")
THRESHOLD_M = st.number_input("üìè Threshold distance (meters)", min_value=1, value=111, step=10)

if st.button("üöÄ Analyze"):
    if not points_file:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Points KML ‡∏Å‡πà‡∏≠‡∏ô")
    else:
        points_path = "points_uploaded.kml"
        with open(points_path, "wb") as f:
            f.write(points_file.read())

        points_grouped = {"uploaded_points": points_path}

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type ‡∏Ç‡∏≠‡∏á input
        if not isinstance(points_grouped, dict):
            st.error(f"points_grouped ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ {type(points_grouped)}")
            st.stop()
        if not isinstance(redlines_dict, dict):
            st.error(f"redlines_files ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ {type(redlines_dict)}")
            st.stop()

        try:
            # ‡πÉ‡∏ä‡πâ spinner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress bar
            with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                points_df, redline_summary = analyze_points_vs_redlines(
                    points_grouped,
                    redlines_dict,
                    threshold_m=THRESHOLD_M
                )
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            st.stop()

        if points_df is not None:
            st.success("‚úÖ Analysis Complete!")
            st.write(f"üìå Total points analyzed: {len(points_df)}")
            st.write(f"üìè Threshold: {THRESHOLD_M} m")
            st.dataframe(points_df.head(20))

            # Excel result
            result_file = "result.xlsx"
            write_results_to_excel(points_df, redline_summary, THRESHOLD_M, result_file)

            with open(result_file, "rb") as f:
                st.download_button("‚¨áÔ∏è Download Excel", f, file_name="result.xlsx")
        else:
            st.error("‚ùå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
